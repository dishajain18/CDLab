* AFTER LEFT FACTORING IDENTIFIER_LIST *

Program -> main(){ declarations statement-list } 
declarations -> data-type identifier-list; declarations | E
data-type -> int | char
identifier-list -> id identifier-list1
identifier-list1 -> E | , identifier-list | [number]identifier-list2
identifier-list2 -> , identifier-list | E
statement_list -> statement statement_list | E
statement -> assign-stat; | decision_stat
assign_stat -> id = expn
expn -> simple-expn eprime 
eprime -> relop simple-expn | E 
simple-expn -> term seprime 
seprime -> addop term seprime | E
term -> factor tprime
tprime -> mulop factor tprime | E
factor -> id | num
decision-stat -> if (expn) {statement_list} dprime 
dprime -> else {statement_list) | E
relop -> ==|!=|<=|>=|>|< 
addop -> +|- 
mulop -> *|/|%


*terminals*
main
(
)
{
}
int
char
id
=
E
;

*nonterminal*			*first*		  		*follow*    
Program				 main		    		  EOF	
declarations  			int char E	    		  id } if         
data-type			int char	    		  id
identifier-list			  id		    		  ;
identifier-list1		 , [ E		    		  ;
identifier-list2		 , E		   		  ;
statement-list			id if E		   		  }
statement			id if		  		  id if }
assign_stat			  id		 		  ;
expn 				id num		      		  ; )
eprime				== != <= >= > < E   		  ; )
simple-expn			id num 				  == != <= >= > < ; )
seprime				+ - E				  == != <= >= > < ; )
term				id num				  + - == != <= >= > < ; )
tprime				* / % E				  + - == != <= >= > < ; )
factor				id num				  * / % + - == != <= >= > < ; )
decision-stat			if				  id if }
dprime				else E				  id if }
relop				== != <= >= > <			  id num
addop				+ -				  id num
mulop				* / %				  id num

